mod decode;
mod execute;
mod event;
mod message;
mod actor;
mod error;

use crate::{CALL_STACK_END, CALL_STACK_START, Op, Parser, Register::FP, Registers};
use crate::mem::{Memory, StackManager};

pub use self::decode::Decode;
pub use self::execute::Execute;
pub use self::event::Event;
pub use self::message::{Action, Message};
pub use self::actor::{Actor};
pub use self::error::*;

#[derive(Debug)]
pub struct Machine {
    /// Addressable identifier of the machine.
    pub id: Option<u16>,

    /// Memory buffer of the machine.
    pub mem: Memory,

    /// Registers of the machine.
    pub reg: Registers,

    /// Events generated by the machine.
    pub events: Vec<Event>,

    /// Mailbox contains messages sent to this machine.
    pub mailbox: Vec<Message>,

    /// Is the machine in debug mode?
    pub is_debug: bool,

    /// How many messages does the machine expect to receive?
    pub expected_receives: u16,
}

impl Machine {
    /// Creates a new machine.
    pub fn new() -> Machine {
        Machine {
            id: None,

            mem: Memory::new(),
            reg: Registers::new(),

            events: vec![],
            mailbox: vec![],

            is_debug: false,
            expected_receives: 0,
        }
    }

    /// Returns a stack manager for the current machine.
    pub fn stack(&mut self) -> StackManager {
        let mut stack = StackManager::new(&mut self.mem, &mut self.reg);
        stack.is_debug = self.is_debug;
        stack
    }

    pub fn call_stack(&mut self) -> StackManager {
        let mut stack = self.stack();
        stack.sp = FP;
        stack.min = CALL_STACK_START;
        stack.max = CALL_STACK_END;
        stack
    }

    /// Reset the memory and registers to avoid faulty state.
    pub fn reset(&mut self) {
        self.reg.reset();
        self.mem.reset();
    }
}

impl From<Vec<Op>> for Machine {
    fn from(code: Vec<Op>) -> Self {
        let mut m = Machine::new();
        m.mem.load_code(code);
        m
    }
}

impl From<&str> for Machine {
    fn from(source: &str) -> Self {
        let p: Parser = source.into();
        let mut m: Self = p.ops.into();
        m.mem.load_symbols(p.symbols);
        m
    }
}

